    import os
    import numpy as np
    import cv2
    from sklearn.model_selection import train_test_split
    # from tensorflow.keras.utils import to_categorical
    import tensorflow as tf

    # Remove dodgy images
    import cv2
    import imghdr
    from matplotlib import pyplot as plt

    data_dir = 'data'
    os.listdir(data_dir)
    os.listdir(os.path.join(data_dir, 'Control-Axial'))

    image_exts = ['jpeg', 'jpg', 'bmp', 'png']
    image_exts

    img = cv2.imread(os.path.join('data', 'Control-Axial', 'C-A (7).png'))
    img.shape
    plt.imshow(img)

    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.show()

    for image_class in os.listdir(data_dir): 
        for image in os.listdir(os.path.join(data_dir, image_class)):
            image_path = os.path.join(data_dir, image_class, image)
            try: 
                img = cv2.imread(image_path)
                tip = imghdr.what(image_path)
                if tip not in image_exts: 
                    print('Image not in ext list {}'.format(image_path))
                    os.remove(image_path)
            except Exception as e: 
                print('Issue with image {}'.format(image_path))
                # os.remove(image_path)
                
    # Load Data
    import numpy as np
    from matplotlib import pyplot as plt

    data = tf.keras.utils.image_dataset_from_directory('data')
    data_iterator = data.as_numpy_iterator()
    batch = data_iterator.next()

    fig, ax = plt.subplots(ncols=4, figsize=(20,20))
    for idx, img in enumerate(batch[0][:4]):
        ax[idx].imshow(img.astype(int))
        ax[idx].title.set_text(batch[1][idx])
        
    # Scale Data
    data = data.map(lambda x,y: (x/255, y))
    data.as_numpy_iterator().next()

    # Split Data
    train_size = int(len(data)*.7)
    val_size = int(len(data)*.2)
    test_size = int(len(data)*.1)

    train_size

    train = data.take(train_size)
    val = data.skip(train_size).take(val_size)
    test = data.skip(train_size+val_size).take(test_size)

    # Build Deep Learning Model

    train

    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout

    model = Sequential()

    model.add(Conv2D(16, (3,3), 1, activation='relu', input_shape=(256,256,3)))
    model.add(MaxPooling2D())
    model.add(Conv2D(32, (3,3), 1, activation='relu'))
    model.add(MaxPooling2D())
    model.add(Conv2D(16, (3,3), 1, activation='relu'))
    model.add(MaxPooling2D())
    model.add(Flatten())
    model.add(Dense(256, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))

    model.compile('adam', loss=tf.losses.BinaryCrossentropy(), metrics=['accuracy'])

    model.summary()

    logdir='logs'

    tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

    hist = model.fit(train, epochs=20, validation_data=val, callbacks=[tensorboard_callback])
